# -*- coding: utf-8 -*-
"""MLP3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7rowceDouNi4ZprODHqP3XnyNqocrZA
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt
# %matplotlib inline

# read the data ser
words = open('names.txt','r').read().splitlines()

# Build a vocabulary of characters and a mapping from/to integers
chars = sorted(list(set(''.join(words))))
stoi = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s,i in stoi.items()}
vocab_size = len(itos)

block_size = 3

def build_dataset(words):

  X,Y = [], [] #inputs and targets
  for w in words:
    context = [0] * block_size
    for ch in w + '.':
      ix = stoi[ch]
      X.append(context)
      Y.append(ix)
      context = context[1:] + [ix] #crop and append

  X = torch.tensor(X)
  Y = torch.tensor(Y)
  return X, Y

import random
random.seed(42)
random.shuffle(words) #randomly shuffle the words
n1 = int(0.8 * len(words))
n2 = int(0.9 * len(words))

Xtr, Ytr = build_dataset(words[:n1])       #80%
Xdev, Ydev = build_dataset(words[n1:n2])   #10%
Xte, Yte = build_dataset(words[n2:])       #10%

class Linear:

  def __init__(self, fan_in, fan_out, bias = True):
    self.weight = torch.randn((fan_in,fan_out), generator = g)/ fan_in**0.5
    self.bias = torch.zeros((fan_out)) if bias else None

  def __call__(self,x):
    self.out = x @ self.weight
    if self.bias is not None:
      self.out += self.bias
    return self.out

  def parameters(self):
    return [self.weight] + ([] if self.bias is None else [self.bias])

class BatchNorm1D:

  def __init__(self, dim, eps = 1e-5, momentum = 0.1):
    self.eps = eps
    self.momentum = momentum
    self.training = True

    # Parameters (Trained with backprop)
    self.gamma = torch.ones(dim)
    self.beta = torch.zeros(dim)

    # buffers (Trained with running momentum update)
    self.running_mean = torch.zeros(dim)
    self.running_var = torch.ones(dim)

  def __call__(self, x):
    if self.training:
      xmean = x.mean(0, keepdim = True)  # batch mean
      xvar = x.var(0, keepdim = True, unbiased = True)  # batch variance
    else:
      xmean = self.running_mean
      xvar = self.running_var

    xhat = (x - xmean)/torch.sqrt(xvar - self.eps) # normalize to unit variance
    self.out = self.gamma * xhat + self.beta

    # update the buffers

    if self.training:
      with torch.no_grad():
        self.running_mean = (1-self.momentum) *self.running_mean + self.momentum* xmean
        self.running_var = (1-self.momentum) *self.running_var + self.momentum* xvar
    return self.out

  def parameters(self):
    return [self.gamma, self.beta]

class Tanh:
  def __call__(self,x):
    self.out = torch.tanh(x)
    return self.out
  def parameters(self):
    return []

n_embed = 10 # dimension of the character embedding
n_hidden = 100 # number of hidden neurons in a layer
g = torch.Generator().manual_seed(2147483647)

C = torch.randn((vocab_size,n_embed),      generator = g)
layers = [
    Linear(n_embed*block_size, n_hidden), BatchNorm1D(n_hidden), Tanh(),
    Linear(          n_hidden, n_hidden), BatchNorm1D(n_hidden), Tanh(),
    Linear(          n_hidden, n_hidden), BatchNorm1D(n_hidden), Tanh(),
    Linear(          n_hidden, n_hidden), BatchNorm1D(n_hidden), Tanh(),
    Linear(          n_hidden, n_hidden), BatchNorm1D(n_hidden), Tanh(),
    Linear(          n_hidden, vocab_size), BatchNorm1D(vocab_size),
]

with torch.no_grad():
  # last layer: make less confident
  layers[-1].gamma *= 0.1
  # apply gain to other layers
  for layer in layers[:-1]:
    if isinstance(layer,Linear):
      layer.weight *= 5/3

parameters = [C]+ [p for layer in layers for p in layer.parameters()]

print(sum(p.nelement() for p in parameters))

for p in parameters:
  p.requires_grad = True

# optimization
max_steps = 200000
batch_size = 32
lossi = []
ud = []

for i in range(max_steps):

  #mini batch construct
  ix = torch.randint(0,Xtr.shape[0],(batch_size,))
  Xb , Yb = Xtr[ix] , Ytr[ix]

  #forward pass
  emb = C[Xb]
  x = emb.view(emb.shape[0],-1) # concatenate
  for layer in layers:
    x = layer(x)
  loss = F.cross_entropy(x,Yb) # cross entropy loss

  #backward pass
  for layer in layers:
    layer.out.retain_grad()
  for p in parameters:
    p.grad = None
  loss.backward()

  #update
  lr = 10 #0.1 if i<10000 else 0.01
  for p in parameters:
    p.data += -lr*p.grad

  if i%10000 ==0:
    print(f"{i:7d}/ {max_steps:7d}: {loss.item():.4f}")

  lossi.append(loss.log10().item())

  with torch.no_grad():
    ud.append([((lr*p.grad.std())/p.data.std()).log10().item() for p in parameters])
  break

# visualize histograms
plt.figure(figsize=(20, 4)) # width and height of the plot
legends = []
for i, layer in enumerate(layers[:-1]): # note: exclude the output layer
  if isinstance(layer, Tanh):
    t = layer.out
    print('layer %d (%10s): mean %+.2f, std %.2f, saturated: %.2f%%' % (i, layer.__class__.__name__, t.mean(), t.std(), (t.abs() > 0.97).float().mean()*100))
    hy, hx = torch.histogram(t, density=True)
    plt.plot(hx[:-1].detach(), hy.detach())
    legends.append(f'layer {i} ({layer.__class__.__name__}')
plt.legend(legends);
plt.title('activation distribution')

# visualize histograms
plt.figure(figsize=(20, 4)) # width and height of the plot
legends = []
for i, layer in enumerate(layers[:-1]): # note: exclude the output layer
  if isinstance(layer, Tanh):
    t = layer.out.grad
    print('layer %d (%10s): mean %+f, std %e' % (i, layer.__class__.__name__, t.mean(), t.std()))
    hy, hx = torch.histogram(t, density=True)
    plt.plot(hx[:-1].detach(), hy.detach())
    legends.append(f'layer {i} ({layer.__class__.__name__}')
plt.legend(legends);
plt.title('gradient distribution')

# visualize histograms
plt.figure(figsize=(20, 4)) # width and height of the plot
legends = []
for i,p in enumerate(parameters):
  t = p.grad
  if p.ndim == 2:
    print('weight %10s | mean %+f | std %e | grad:data ratio %e' % (tuple(p.shape), t.mean(), t.std(), t.std() / p.std()))
    hy, hx = torch.histogram(t, density=True)
    plt.plot(hx[:-1].detach(), hy.detach())
    legends.append(f'{i} {tuple(p.shape)}')
plt.legend(legends)
plt.title('weights gradient distribution');

plt.figure(figsize=(20, 4))
legends = []
for i,p in enumerate(parameters):
  if p.ndim == 2:
    plt.plot([ud[j][i] for j in range(len(ud))])
    legends.append('param %d' % i)
plt.plot([0, len(ud)], [-3, -3], 'k') # these ratios should be ~1e-3, indicate on plot
plt.legend(legends);